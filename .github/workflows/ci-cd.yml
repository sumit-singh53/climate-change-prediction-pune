name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=88
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check import sorting
      run: |
        isort --check-only --diff src/ || echo "Import sorting issues found (non-blocking)"
    
    - name: Check code formatting
      run: |
        black --check --diff src/ || echo "Code formatting issues found (non-blocking)"

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Install requirements with timeout and retry
        pip install --timeout 60 --retries 3 -r requirements.txt
    
    - name: Create necessary directories
      run: |
        mkdir -p data/raw data/processed data/external data/iot
        mkdir -p outputs/models outputs/logs outputs/figures
    
    - name: Run system validation tests
      run: |
        python test_system.py
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Test imports and basic functionality
      run: |
        python -c "
        import sys
        sys.path.append('src')
        try:
            from config import PUNE_LOCATIONS, MODEL_CONFIG
            print('✅ Configuration imports successful')
            print(f'Locations configured: {len(PUNE_LOCATIONS)}')
            print(f'Target variables: {MODEL_CONFIG[\"target_variables\"]}')
        except Exception as e:
            print(f'❌ Import test failed: {e}')
            sys.exit(1)
        "
    
    - name: Test dashboard startup (non-blocking)
      run: |
        timeout 30s python run_system.py --mode dashboard --quick --skip-setup || echo "Dashboard test completed (expected timeout)"
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check --json || echo "Safety check completed with warnings"
      continue-on-error: true
    
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json || echo "Bandit scan completed with warnings"
      continue-on-error: true

  build-docker:
    name: Docker Build Test
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: climate-prediction:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker container
      run: |
        # Start container in background
        docker run -d --name test-container -p 8501:8501 climate-prediction:test
        
        # Wait for container to start
        sleep 15
        
        # Check if container is running
        if docker ps | grep -q test-container; then
          echo "✅ Container started successfully"
        else
          echo "❌ Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  integration-test:
    name: Integration Tests
    needs: [test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test environment
      run: |
        mkdir -p data/raw data/processed data/external data/iot
        mkdir -p outputs/models outputs/logs outputs/figures
    
    - name: Test data collection module
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from enhanced_data_collector import EnhancedDataCollector
        collector = EnhancedDataCollector()
        print('✅ Data collector initialized successfully')
        "
    
    - name: Test IoT integration module
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from iot_integration import IoTDataCollector
        collector = IoTDataCollector()
        print('✅ IoT collector initialized successfully')
        "
    
    - name: Test ML models module
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from advanced_ml_models import AdvancedMLModels
        models = AdvancedMLModels()
        print('✅ ML models initialized successfully')
        "

  deploy:
    name: Deployment Ready
    needs: [lint, test, security, build-docker, integration-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment status
      run: |
        echo "🎉 All checks passed! Ready for deployment."
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        
    - name: Create deployment artifact
      run: |
        echo "deployment-ready" > deployment-status.txt
        echo "timestamp: $(date)" >> deployment-status.txt
        echo "commit: ${{ github.sha }}" >> deployment-status.txt
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-status
        path: deployment-status.txt